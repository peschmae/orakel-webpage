package valkey

import (
	"time"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	checksv1alpha1 "github.com/fhnw-imvs/fhnw-kubeseccontext/api/v1alpha1"
)

type RecordedMetrics struct {
	Pod      string                              `json:"pod"`
	Start    time.Time                           `json:"start_time"`
	End      time.Time                           `json:"end_time"`
	Interval int                                 `json:"interval"`
	Duration int                                 `json:"duration"`
	Usage    map[metav1.Time]ResourceUsageRecord `json:"usage"`
}

// WorkloadRecording contains all signals recorded during a single check/job
type WorkloadRecording struct {
	// Type of workload recording. Allowed values: Baseline,*Check
	Type string `json:"type,omitempty"`

	// Indicates wether this configuration ran successfully or not
	Success bool `json:"success"`

	// Time the recording started at
	StartTime metav1.Time `json:"startTime,omitempty"`

	// Time the recording ended at
	EndTime metav1.Time `json:"endTime,omitempty"`

	// The securityContext configurations applied for this job
	SecurityContextConfigurations *checksv1alpha1.SecurityContextDefaults `json:"securityContextConfigurations,omitempty"`

	// The recorded cpu and memory usage during this check run
	RecordedMetrics []ResourceUsageRecord `json:"recordedMetrics,omitempty"`
	// The logs generated by the pod under test
	Logs map[string][]string `json:"logs,omitempty"`
}

type ResourceUsageRecord struct {
	// Time when this recording was taken. Used to sort the recordings
	Time metav1.Time `json:"timestamp,omitempty"`
	// CpuNanoCores usage in nanocores
	// 1 core = 1e9 nanocores
	CpuNanoCores int64 `json:"cpu,omitempty"`
	// Memory usage in bytes
	MemoryBytes int64 `json:"memory,omitempty"`
}
